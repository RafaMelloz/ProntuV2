generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  idClinic        Int     @id @default(autoincrement())
  clinicSlug      String  @unique @default(cuid())
  nameClinic      String
  logoClinic      String?
  address         String
  responsibleName String
  cpfCnpj         String  @unique

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  alreadyAClient           Boolean?

  users      User[]
  patients   Patient[]
  calendars  Calendar[]
  codeClinic String?

  @@map("clinics")
}

model User {
  idUser     Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  phone      String?
  password   String
  role       String
  idClinic   Int
  clinic     Clinic     @relation(fields: [idClinic], references: [idClinic])
  profileImg String?
  Calendar   Calendar[]
  accounts   Account[] // Relacionamento para contas de autenticação
  sessions   Session[] // Relacionamento para sessões de autenticação

  @@map("users")
}

model Patient {
  idPatient      Int             @id @default(autoincrement())
  name           String
  birth_date     String
  phone          String
  cpf            String
  profession     String
  email          String?
  address        String
  how_know_us    String
  idClinic       Int
  clinic         Clinic          @relation(fields: [idClinic], references: [idClinic])
  medicalRecords MedicalRecord[]
  symptoms       Symptom[]
  Calendar       Calendar[]

  @@map("patients")
}

model Symptom {
  idSymptom           Int      @id @default(autoincrement())
  uncomfortableAreas  String
  description         String
  cause               String
  discomforts         String[]
  frequency           String
  discomfortIncreases String[]
  discomfortDecreases String[]
  geralState          String[]
  headNeck            String[]
  thoraxRespiratory   String[]
  cardioVascular      String[]
  gastroIntestinal    String[]
  genitoUrinary       String[]

  patientId Int
  patient   Patient @relation(fields: [patientId], references: [idPatient])

  @@map("symptoms")
}

model MedicalRecord {
  idMedicalRecord      Int     @id @default(autoincrement())
  patientId            Int     @unique
  observations         String?
  subjectiveEvaluation String?

  services  Services[]
  documents Documents[]
  patient   Patient     @relation(fields: [patientId], references: [idPatient])

  @@map("medical_records")
}

model Documents {
  idDocuments     Int @id @default(autoincrement())
  medicalRecordId Int

  nameImagesEvaluation String[]
  imagesEvaluation     String[]
  examsName            String[]
  exams                String[]
  medicalRecords       MedicalRecord @relation(fields: [medicalRecordId], references: [idMedicalRecord])

  @@map("documents")
}

model Services {
  idService          Int           @id @default(autoincrement())
  nameService        String
  dateService        String
  adjustmentAreas    String[]
  descriptionService String
  medicalRecordId    Int
  medicalRecords     MedicalRecord @relation(fields: [medicalRecordId], references: [idMedicalRecord])

  @@map("services")
}

model Calendar {
  IdConsult      Int     @id @default(autoincrement())
  patientName    String
  dateForListing String
  dateConsult    String
  hourConsult    String
  consultType    String
  qntReturns     Int?
  currentReturn  Int?
  phone          String
  notes          String?

  idClinic       Int
  patientId      Int?
  professionalId Int

  professional User     @relation(fields: [professionalId], references: [idUser])
  patient      Patient? @relation(fields: [patientId], references: [idPatient])
  clinic       Clinic   @relation(fields: [idClinic], references: [idClinic])

  @@map("calendars")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  question  String
  isUseful  Boolean
  createdAt DateTime @default(now())

  @@map("feedback")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int // Altere para Int para coincidir com o tipo de ID do seu modelo User
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [idUser], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int // Altere para Int para coincidir com o tipo de ID do seu modelo User
  expires      DateTime
  user         User     @relation(fields: [userId], references: [idUser], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
